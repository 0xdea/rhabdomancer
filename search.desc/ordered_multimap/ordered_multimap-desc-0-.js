searchState.loadedDescShard("ordered_multimap", 0, "This crate provides a type <code>ListOrderedMultimap</code> which is a …\nProvides types related to the usage of <code>ListOrderedMultimap</code>.\nAn immutable reference to a key. This implies that the key …\nDummy hasher that is not meant to be used. It is simply a …\nDummy builder hasher that is not meant to be used. It is …\nA view into a single entry in the multimap, which may …\nAn iterator that yields immutable references to all values …\nAn iterator that moves all values of a given key out of a …\nAn iterator that yields mutable references to all values …\nAn iterator that owns and yields all key-value pairs in a …\nAn iterator that yields immutable references to all …\nAn iterator that yields mutable references to all …\nAn iterator that yields immutable references to all keys …\nAn iterator that yields mutable references to all keys and …\nA wrapper around a key that is either borrowed or owned.\nAn iterator that yields immutable references to all keys …\nA multimap that associates with each key a list of values.\nThe value type of the internal hash map.\nAn occupied entry associated with one or more values.\nA view into an occupied entry in the multimap.\nAn owned key. This will occur when a key is no longer …\nA random state to use for the hashmap in the multimap.\nA vacant entry with no associated values.\nA view into a vacant entry in the multimap.\nThe value entry that is contained within the internal …\nAn iterator that yields immutable references to all values …\nAn iterator that yields mutable references to all values …\nCalls the given function with a mutable reference to the …\nExamples\nAppends a value to the list of values associated with the …\nConvenience function for adding a new value to the entry.\nReturns an immutable reference to the first key-value pair …\nReturns an immutable reference to the first key-value pair …\nThe builder hasher for the map, kept separately for …\nThe builder hasher for the map, kept separately for …\nThe builder hasher for the map, kept separately for …\nThe hasher builder that constructs new hashers for hashing …\nRemoves all keys and values from the multimap.\nReturns whether the given key is in the multimap.\nConvenience function for creating an empty iterator.\nConvenience function for creating an empty iterator.\nConvenience function for creating an empty iterator.\nReturns whether the given key is in the multimap.\nReturns the number of values associated with a key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function for creating a new iterator from a …\nConvenience function for creating a new iterator from a …\nConvenience function for creating a new iterator from a …\nReturns an immutable reference to the first key-value pair …\nReturns an immutable reference to the first key-value pair …\nExamples\nReturns an immutable reference to the first value, by …\nReturns an iterator that yields immutable references to …\nReturns an iterator that yields mutable references to all …\nExamples\nReturns a mutable reference to the first value, by …\nThe hash of the key for the entry.\nComputes the hash value of the given key.\nReturns a reference to the multimap’s <code>BuildHasher</code>.\nThe first index of the values not yet yielded.\nThe first index of the values not yet yielded.\nThe first index of the values not yet yielded.\nThe index of the first value for this entry.\nExamples\nExamples\nInserts the key-value pair into the multimap and returns …\nExamples\nInserts the key-value pair into the multimap and returns …\nExamples\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExamples\nExamples\nIf the key wrapped is owned, it is returned. Otherwise, …\nReturns whether the wrapped key is borrowed.\nReturns whether the multimap is empty.\nReturns whether the wrapped key is owned.\nExamples\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields mutable references to all …\nCreates an iterator that yields immutable references to …\nReturns an iterator that yields immutable references to …\nThe iterator over the list of all values. This is ordered …\nThe iterator over the list of all values. This is ordered …\nThe iterator over the list of all values. This is ordered …\nThe iterator over the list of all values. This is ordered …\nThe iterator over the list of all values. This is ordered …\nExamples\nReturns an iterator that yields mutable references to all …\nExamples\nExamples\nThe key for this entry for when it is to be inserted into …\nThe index of the key in the key list for this entry.\nReturns an iterator that yields immutable references to …\nThe list of the keys in the multimap. This is ordered by …\nReturns the number of keys the multimap can hold without …\nReturns the number of keys in the multimap.\nExamples\nThe number of values for this entry.\nReference to the multimap.\nThe internal mapping from key hashes to associated value …\nThe internal mapping from key hashes to associated value …\nThe map from indices of keys to the indices of their …\nCreates a new multimap with no initial capacity.\nConvenience function for creating a new multimap entry.\nConvenience function for creating a new value entry.\nThe index of the next value with the same key.\nIf the entry is vacant, the given value will be inserted …\nIf the entry is vacant, the given value will be inserted …\nIf the entry is vacant, the value returned from the given …\nIf the entry is vacant, the value returned from the given …\nReorganizes the multimap to ensure maximum spatial …\nReorganizes the multimap to ensure maximum spatial …\nReturns an iterator that yields immutable references to …\nReturns an iterator that yields immutable references to …\nBecause <code>EntryValuesMut::values</code> is a pointer, we need to …\nRemoves the last key-value pair to have been inserted.\nRemoves the first key-value pair to have been inserted.\nThe index of the previous value with the same key.\nThe remaining number of values to be yielded.\nThe remaining number of values to be yielded.\nThe remaining number of values to be yielded.\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nReserves additional capacity such that more keys can be …\nReserves additional capacity such that more values can be …\nConvenience function for resetting the entry to contain …\nKeeps all key-value pairs that satisfy the given predicate …\nHelper function for <code>ListOrderedMultimap::retain</code> to deal …\nThe last index of the values not yet yielded.\nThe last index of the values not yet yielded.\nThe last index of the values not yet yielded.\nThe index of the last value for this entry.\nThe actual value stored in this entry.\nReturns an iterator that yields immutable references to …\nThe list of the values in the map. This is ordered by time …\nThe list of the values in the map. This is ordered by time …\nThe list of the values in the map. This is ordered by time …\nThe list of the values in the map. This is ordered by time …\nThe list of the values in the map. This is ordered by time …\nThe list of the values in the multimap. This is ordered by …\nReturns the number of values the multimap can hold without …\nReturns the total number of values in the multimap across …\nReturns an iterator that yields mutable references to all …\nCreates a new multimap with the specified capacities.\nCreates a new multimap with the specified capacities and …\nCreates a new multimap with no capacity which will use the …")