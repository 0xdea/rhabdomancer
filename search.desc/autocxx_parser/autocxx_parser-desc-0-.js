searchState.loadedDescShard("autocxx_parser", 0, "An entry in the allowlist.\nCore of the autocxx engine. See <code>generate</code> for most details …\nStruct which stores multiple sets of bindings and can be …\nA little like <code>syn::Path</code> but simpler - contains only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the Rust bindings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllowlist configuration.\nAn entry in the allowlist.\nErrors that may be encountered while adding allowlist …\nNewtype wrapper so we can implement Hash.\nNewtype wrapper so we can implement Hash.\nThe allowlist of items to be passed into bindgen, if any.\nWhether to avoid generating the standard helpful utility …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a hash of the contents of this <code>include_cpp!</code> block.\nReturn the filename to which generated .rs should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this type is on the allowlist specified by the …\nItems which the user has explicitly asked us to generate; …\nUsed in reduction to substitute all included headers with …\nWhether we are treating C++ references as a different …\nIn case there are multiple sets of ffi mods in a single …\nTrait for handling an <code>include_cpp!</code> configuration directive.\nDirective for either <code>generate!</code> (false) or <code>generate_pod!</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe strategy used to generate, and to find generated, …\nReturns the argument unchanged.\nLocation to generate C++ code.\nLocation to generate C++ header files.\nLocation to generate Rust files.\nCalls <code>U::from(self)</code>.\nMake a macro to include a given generated Rust file name. …\nFrom a build script, inform cargo how to set environment …\nStruct which stores multiple sets of bindings and can be …\nRetrieves the bindings corresponding to a given …\nInsert some generated Rust bindings into this data …\nA little like <code>syn::Path</code> but simpler - contains only …")