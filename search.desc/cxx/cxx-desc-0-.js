searchState.loadedDescShard("cxx", 0, "github crates-io docs-rs\nBinding to C++ <code>std::string</code>.\nBinding to C++ <code>std::vector&lt;T, std::allocator&lt;T&gt;&gt;</code>.\nException thrown from an <code>extern &quot;C++&quot;</code> function.\nA type for which the layout is determined by its C++ …\nA type-level representation of the type’s C++ namespace …\nEither <code>cxx::kind::Opaque</code> or <code>cxx::kind::Trivial</code>.\nBinding to C++ <code>std::shared_ptr&lt;T&gt;</code>.\nSynonym for <code>CxxString</code>.\nBinding to C++ <code>std::unique_ptr&lt;T, std::default_delete&lt;T&gt;&gt;</code>.\nSynonym for <code>CxxVector</code>.\nBinding to C++ <code>std::weak_ptr&lt;T&gt;</code>.\n<code>#[cxx::bridge] mod ffi { ... }</code>\nLess used details of <code>CxxVector</code> are exposed in this module. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarker types identifying Rust’s knowledge about an …\nConstruct a C++ std::string on the Rust stack.\nLess used details of <code>UniquePtr</code> and <code>SharedPtr</code>.\nFor use in impls of the <code>ExternType</code> trait. See <code>ExternType</code>.\nLess used details of <code>CxxVector</code>.\nBinding to C++ <code>std::vector&lt;T, std::allocator&lt;T&gt;&gt;</code>.\nIterator over elements of a <code>CxxVector</code> by shared reference.\nIterator over elements of a <code>CxxVector</code> by pinned mutable …\nTrait bound for types which may be used as the <code>T</code> inside of …\nReturns a slice to the underlying contiguous array of …\nReturns a slice to the underlying contiguous array of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to an element at the given position, …\nReturns a reference to an element without doing bounds …\nReturns a pinned mutable reference to an element at the …\nReturns a pinned mutable reference to an element without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the vector contains no elements.\nReturns an iterator over elements of type <code>&amp;T</code>.\nReturns an iterator over elements of type <code>Pin&lt;&amp;mut T&gt;</code>.\nReturns the number of elements in the vector.\nConstructs a new heap allocated vector, wrapped by …\nRemoves the last element from a vector and returns it, or …\nAppends an element to the back of the vector.\nException thrown from an <code>extern &quot;C++&quot;</code> function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type for which the layout is determined by its C++ …\nA type-level representation of the type’s C++ namespace …\nEither <code>cxx::kind::Opaque</code> or <code>cxx::kind::Trivial</code>.\nMarker types identifying Rust’s knowledge about an …\nAn opaque type which cannot be passed or held by value …\nA type with trivial move constructor and no destructor, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn opaque type which cannot be passed or held by value …\nA type with trivial move constructor and no destructor, …\nTrait bound for types which may be used as the <code>T</code> inside of …\nTrait bound for types which may be used as the <code>T</code> inside of …\nTrait bound for types which may be used as the <code>T</code> inside of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinding to C++ <code>std::shared_ptr&lt;T&gt;</code>.\nTrait bound for types which may be used as the <code>T</code> inside of …\nReturns a reference to the object owned by this SharedPtr …\nConstructs new WeakPtr as a non-owning reference to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the SharedPtr does not own an object.\nAllocates memory on the heap and makes a SharedPtr owner …\nMakes a new SharedPtr wrapping a null pointer.\nBinding to C++ <code>std::string</code>.\nReturns a byte slice of this string’s contents.\nProduces a nul-terminated string view of this string’s …\nProduces a pointer to the first character of the string.\nRemoves all characters from the string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if <code>self</code> has a length of zero bytes.\nReturns the length of the string in bytes.\n<code>CxxString</code> is not constructible via <code>new</code>. Instead, use the …\nAppends arbitrary bytes onto the end of this C++ string.\nAppends a given string slice onto the end of this C++ …\nEnsures that this string’s capacity is at least …\nValidates that the C++ string contains UTF-8 data and …\nIf the contents of the C++ string are valid UTF-8, this …\nBinding to C++ <code>std::unique_ptr&lt;T, std::default_delete&lt;T&gt;&gt;</code>.\nTrait bound for types which may be used as the <code>T</code> inside of …\nReturns a mutable pinned reference to the object owned by …\nReturns a raw mutable pointer to the object owned by this …\nReturns a raw const pointer to the object owned by this …\nReturns a reference to the object owned by this UniquePtr …\nReturns the argument unchanged.\nConstructs a UniquePtr retaking ownership of a pointer …\nCalls <code>U::from(self)</code>.\nConsumes the UniquePtr, releasing its ownership of the …\nChecks whether the UniquePtr does not own an object.\nAllocates memory on the heap and makes a UniquePtr …\nMakes a new UniquePtr wrapping a null pointer.\nReturns a mutable pinned reference to the object owned by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterator over elements of a <code>CxxVector</code> by shared reference.\nIterator over elements of a <code>CxxVector</code> by pinned mutable …\nSynonym for <code>CxxVector</code>.\nTrait bound for types which may be used as the <code>T</code> inside of …\nBinding to C++ <code>std::weak_ptr&lt;T&gt;</code>.\nTrait bound for types which may be used as the <code>T</code> inside of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMakes a new WeakPtr wrapping a null pointer.\nUpgrades a non-owning reference into an owning reference …")