searchState.loadedDescShard("dlv_list", 0, "Crate that implements a semi-doubly linked list via a …\nAn iterator that yields and removes all entries from the …\nAn entry in the list. This can be either occupied or …\nA wrapper type that indicates an index into the list.\nAn iterator that yields all indices in the list.\nAn iterator that moves all entries out of the entry list.\nAn iterator that yields immutable references to entries in …\nAn iterator that yields mutable references to entries in …\nNumber type that’s capable of representing [0, …\nAn occupied entry contains actual entry data inserted by …\nAn occupied entry in the list.\nA vacant entry is one that can be reused.\nA vacant entry in the list.\nA semi-doubly linked list implemented with a vector.\nReturns an immutable reference to the value at the back of …\nReturns the index of the value at the back of the list, if …\nReturns a mutable reference to the value at the back of …\nReturns the capacity of the list.\nAdd an unsigned integer to a index. Check for bound …\nSubtract an unsigned integer from a index. Check for bound …\nRemoves all values from the list and invalidates all …\nReturns whether or not the list contains the given value.\nCreates the initial generation seeded by the current time.\nCreates a draining iterator that removes all values from …\nThe backing storage for the list. This includes both used …\nA reference to the actual storage for the entry list.\nA reference to the actual storage for the entry list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference to the value at the front …\nReturns the index of the value at the front of the list, …\nReturns a mutable reference to the value at the front of …\nThe current generation of the list. This is used to avoid …\nThe generation of the entry currently at this index. This …\nThe generation of when this entry was inserted. This is …\nReturns an immutable reference to the value at the given …\nConvert an index to a usize\nReturns a mutable reference to the value at the given …\nReturns the index of the value next to the value at the …\nReturns the index of the value previous to the value at …\nReturns an immutable reference to the value at the given …\nReturns an mutable reference to the value at the given …\nThe index of the head of the list.\nThe index of the head of the unvisited portion of the list.\nThe index of the head of the unvisited portion of the list.\nThe index of the head of the unvisited portion of the list.\nThe index of the head of the unvisited portion of the list.\nThe index of the head of the unvisited portion of the list.\nGet the index as usize\nThe actual index into the entry list.\nCreates an indices iterator which will yield all indices …\nInserts the given value after the value at the given index.\nInserts the given value before the value at the given …\nInserts the given value into the list with the assumption …\nInserts the given value into the list with its expected …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the list is empty.\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields mutable references to …\nReturns the number of values in the list.\nThe length of the list since we cannot rely on the length …\nA reference to the entry list.\nThe entry list from which entries are yielded.\nMove the node at <code>index</code> to after the node at <code>target</code>.\nMove the node at <code>index</code> to before the node at <code>target</code>.\nCreates a new list with no initial capacity.\nConvenience function for creating new index.\nCreate a new index from a usize, if <code>index</code> is <code>usize::MAX</code> …\nConvenience function for creating a new occupied entry.\nConvenience function for creating a new vacant entry.\nCreate a new index from a usize, without checking if <code>index</code> …\nThe index of the next occupied entry in the list.\nThe index of the next vacant entry in the list.\nReturns the occupied entry by moving it out of the entry.\nReturns a mutable reference to the occupied entry.\nReturns an immutable reference to the occupied entry.\nReorganizes the existing values to ensure maximum cache …\nReorganizes the existing values to ensure maximum cache …\nThis type is parameterized on the entry data type to avoid …\nBecause <code>IterMut::entries</code> is a pointer, we need to have a …\nRemoves and returns the value at the back of the list, if …\nRemoves and returns the value at the front of the list, if …\nThe index of the previous occupied entry in the list.\nInserts the given value to the back of the list.\nInserts the given value to the front of the list.\nThe number of entries that have not been visited.\nThe number of entries that have not been visited.\nThe number of entries that have not been visited.\nThe number of entries that have not been visited.\nThe number of entries that have not been visited.\nRemoves and returns the value at the given index, if it …\nRemoves and returns the entry at the given index, if it …\nRemoves and returns the entry at the given index with the …\nReserves capacity for the given expected size increase.\nRemoves all elements from the list not satisfying the …\nThe index of the tail of the list.\nThe index of the tail of the unvisited portion of the list.\nThe index of the tail of the unvisited portion of the list.\nThe index of the tail of the unvisited portion of the list.\nThe index of the tail of the unvisited portion of the list.\nThe index of the tail of the unvisited portion of the list.\nConnect the node at <code>index</code> to the node at <code>next</code>. If <code>index</code> is …\nThe index of the head of the vacant indices.\nReturns an immutable reference to the vacant entry.\nThe actual value being stored in this entry.\nCreates a new list with the given capacity.")