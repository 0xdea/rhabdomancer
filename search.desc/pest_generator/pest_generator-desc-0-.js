searchState.loadedDescShard("pest_generator", 0, "pest generator\nProcesses the derive/proc macro input and generates the …\nType and helper to collect the gramamr and rule …\nHelpers to generate the code for the Parser `derive``.\nTypes and helpers to parse the input of the derive macro.\nAbstraction for the grammer and rule doc.\nConsume pairs to matches <code>Rule::grammar_doc</code>, <code>Rule::line_doc</code> …\nReturns the argument unchanged.\nThe grammar documentation is defined at the beginning of a …\nCalls <code>U::from(self)</code>.\nHashMap for store all doc_comments for rules. key is rule …\nReturns the argument unchanged.\nGenerates the corresponding parser based based on the …\nGenerate Rust <code>include_str!</code> for grammar files, then Cargo …\nCalls <code>U::from(self)</code>.\nParsed information of the derive and the attributes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe generics of the deriving struct, union, or enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe identifier of the deriving struct, union, or enum.\nIndicates whether the ‘non_exhaustive’ attribute is …")