searchState.loadedDescShard("yaml_rust2", 0, "YAML 1.2 implementation in pure Rust.\nHolds functions to determine if a character belongs to a …\nDebugging helpers.\nYAML serialization helpers.\nHome to the YAML Parser.\nHome to the YAML Scanner.\nYAML objects manipulation utilities.\nConvert the hexadecimal digit to an integer.\nCheck whether the character is a digit, letter, <code>_</code> or <code>-</code>.\nCheck whether the character is a valid YAML anchor name …\nCheck whether the character is a whitespace (<code> </code> or <code>\\t</code>).\nCheck whether the character is nil, a linebreak or a …\nCheck whether the character is the BOM character.\nCheck whether the character is a line break (<code>\\r</code> or <code>\\n</code>).\nCheck whether the character is nil or a line break (<code>\\0</code>, <code>\\r</code>…\nCheck whether the character is an ascii digit.\nCheck whether the character is a YAML flow character (one …\nCheck whether the character is a hexadecimal character …\nCheck whether the character is a valid tag character.\nCheck whether the character is a valid URI character.\nCheck if the string can be expressed a valid literal block …\nCheck whether the character is a valid word character.\nCheck whether the character is a YAML non-breaking …\nCheck whether the character is NOT a YAML whitespace (<code> </code> / …\nCheck whether the character is nil (<code>\\0</code>).\nEvaluates to nothing.\nAn error when emitting YAML.\nA convenience alias for emitter functions that may fail …\nContains the error value\nA formatting error.\nContains the success value\nThe YAML serializer.\nSet ‘compact inline notation’ on or off, as described …\nDump Yaml to an output stream.\nEmit a yaml as a hash or array value: i.e., which should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this emitter is using ‘compact inline …\nDetermine if this emitter will emit multiline strings when …\nRender strings containing multiple lines in literal style.\nCheck if the string requires quoting. Strings starting …\nCreate a new emitter serializing into <code>writer</code>.\nA YAML Alias.\nThe YAML end document directive (<code>...</code>).\nThe YAML start document directive (<code>---</code>).\nContains the error value\nAn event generated by the YAML parser.\nTrait to be implemented in order to use the low-level …\nThe end of a YAML mapping (object, hash).\nThe start of a YAML mapping (object, hash).\nTrait to be implemented for using the low-level parsing …\nReserved for internal use.\nContains the success value\nA convenience alias for a <code>Result</code> of a parser event.\nA YAML parser.\nValue, style, anchor id, tag\nThe end of a YAML sequence (array).\nThe start of a YAML sequence (array).\nLast event that will be generated by the parser. Signals …\nWe await the start of the stream.\nEvent generated at the very beginning of parsing.\nA YAML tag.\nCreate an empty scalar.\nCreate an empty scalar with the given anchor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle of the tag (<code>!</code> included).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to keep tags across multiple documents when …\nMake tags global across all documents.\nLoad the YAML from the stream in <code>self</code>, pushing events into …\nCreate a new instance of a parser from the given input of …\nCreate a new instance of a parser from a &amp;str.\nTry to load the next event and return it, consuming it …\nHandler called for each YAML event that is emitted by the …\nHandler called for each event that occurs.\nTry to load the next event and return it, but do not …\nPeek at the next token from the scanner.\nPops the top-most state and make it the current state.\nPush a new state atop the state stack.\nResolve a tag from the handle and the suffix.\nExtract and return the next token from the scanner.\nSkip the next token from the scanner.\nThe suffix of the tag.\nThe tag directives (<code>%TAG</code>) the parser has encountered.\nA reference to an anchor.\nA YAML anchor (<code>&amp;</code>/<code>*</code>).\nThe size of the <code>Scanner</code> buffer.\nEnd of the corresponding <code>BlockSequenceStart</code> or …\nAn entry in a block sequence (c.f.: …\nThe start of a sequence mapping.\nThe start of a sequence block.\nChomping, how final line breaks and trailing empty lines …\nThe final line break is preserved, but trailing empty …\nThe end of a YAML document (<code>...</code>).\nThe start of a YAML document (<code>---</code>).\nA YAML double quoted scalar.\nContains the error value\nAn entry in a flow sequence (c.f.: …\nEnd of an inline mapping.\nStart of an inline mapping (<code>{ a: b, c: d }</code>).\nEnd of an inline array.\nStart of an inline array (<code>[ a, b ]</code>).\nA YAML folded block (<code>&gt;</code> block).\nAn indentation level on the stack of indentations.\nThe final line break and trailing empty lines are included.\nA key in a mapping.\nA YAML literal block (<code>|</code> block).\nA location in a yaml document.\nDon’t skip any tab. Return from the function when …\nContains the success value\nA YAML plain scalar.\nReturn value from the function.\nA regular YAML scalar.\nAn error that occurred while scanning.\nA convenience alias for scanner functions that may fail …\nThe YAML scanner.\nA scalar that was parsed and may correspond to a simple …\nA YAML single quoted scalar.\nBehavior to adopt regarding treating tabs as whitespace.\nThe end of the stream, EOF.\nThe start of the stream. Sent first, before even …\nThe final line break and any trailing empty lines are …\nThe encoding of the input. Currently, only UTF-8 is …\nThe style as which the scalar was written in the YAML …\nA YAML tag (starting with bangs <code>!</code>).\nA YAML tag directive (e.g.: <code>!!str</code>, <code>!foo!bar</code>, …).\nA scanner token.\nThe contents of a scanner token.\nUTF-8 encoding.\nA value in a mapping.\nA YAML version directive.\nSkip all tabs as whitespace.\nIn some flow contexts, the value of a mapping is allowed …\nBuffer for the next characters to consume.\nReturn the next character in the buffer.\nReturn whether the next character is <code>c</code>.\nReturn the column of the marker in the source.\nThe column (1-indexed).\nConsume successive non-whitespace characters from a flow …\nIf an implicit mapping had started, end it.\nThe last error that happened.\nPush the <code>Block*</code> token(s) and skip over the <code>-</code>.\nPush the <code>FlowEntry</code> token and skip over the <code>,</code>.\nFetch tokens from the token stream.\nFetch the next token in the stream.\nFetch a value from a mapping (after a <code>:</code>).\nLevel of nesting of flow sequences.\nWhether we started a flow mapping.\nWhether tabs were found while skipping whitespace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a copy of the last error that was encountered, if any.\nWhether a valid YAML whitespace has been found in …\nWhether we currently are in an implicit flow mapping.\nThe former indentation level.\nThe current indentation level.\nList of all block indentation levels we are in (except the …\nReturn the index (in bytes) of the marker in the source.\nThe index (in chars) in the input string.\nReturn the information string describing the error that …\nHuman-readable details about the error.\nInsert a token at the given position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether the scanner is inside a block but outside …\nWhether all characters encountered since the last newline …\nReturn the line of the marker in the source.\nThe line (1-indexed).\nLook for the next character and return it.\nFill <code>self.buffer</code> with at least <code>count</code> characters.\nGet the current position in the input stream.\nThe position at which the error happened in the source.\nThe position at which the token the <code>SimpleKey</code> refers to is.\nThe position of the cursor within the reader.\nReturn the marker pointing to the error in the source.\nWhether, upon closing, this indents generates a <code>BlockEnd</code> …\nCreate a new error from a location and an error string.\nCreate a new <code>SimpleKey</code> at the given <code>Marker</code> and with the …\nCreates the YAML tokenizer.\nCreate a new error from a location and an error string.\nCheck whether the next characters may be part of a plain …\nCheck whether the next characters correspond to an end of …\nCheck whether the next characters correspond to a document …\nReturn the next token in the stream.\nWhether the token this <code>SimpleKey</code> refers to may still be a …\nRead a character from the input stream, returning it …\nThe reader, providing with characters.\nWhether the token this <code>SimpleKey</code> refers to is required to …\nEscape the sequence we encounter in a flow scalar.\nAdd an indentation level to the stack with the given block …\nAdd an indentation level of 1 column that does not start a …\nMark the next token to be inserted as a potential simple …\nRetrieve the contents of the line, parsing it as a block …\nScan for a plain scalar.\nScan for a tag prefix (6.8.2.2).\nScan for a verbatim tag.\nWhether a simple key could potentially start at the …\nA stack of potential simple keys.\nConsume the next character. It is assumed the next …\nDetermine the indentation level for a block scalar from …\nSkip the block scalar indentation and empty lines.\nConsume a linebreak (either CR, LF or CRLF), if any. Do …\nConsume the next characters. It is assumed none of the …\nConsume the next character. It is assumed the next …\nConsume the next character. It is assumed the next …\nSkip over all whitespace and comments until the next token.\nSkip yaml whitespace at most up to eol. Also skips …\nSkip over YAML whitespace (<code> </code>, <code>\\n</code>, <code>\\r</code>).\nMark simple keys that can no longer be keys as such.\nWhether we have already emitted the <code>StreamEnd</code> token.\nReturn whether the <code>TokenType::StreamEnd</code> event has been …\nWhether we have already emitted the <code>StreamStart</code> token.\nReturn whether the <code>TokenType::StreamStart</code> event has been …\nWhether a token is ready to be taken from <code>Self::tokens</code>.\nThe index of the token referred to by the <code>SimpleKey</code>.\nBuffer for tokens to be returned.\nThe number of tokens that have been returned from the …\nPop indentation levels from the stack as much as needed.\nUnroll all last indents created with …\nAlias, not fully supported yet.\nThe type contained in the <code>Yaml::Array</code> variant. This …\nYAML array, can be accessed as a <code>Vec</code>.\nAccessing a nonexistent node via the Index trait returns …\nYAML bool, e.g. <code>true</code> or <code>false</code>.\nCall the user-supplied function upon decoding malformation.\nA decoding error (e.g.: Invalid UTF-8).\nThe type contained in the <code>Yaml::Hash</code> variant. This …\nYAML hash, can be accessed as a <code>LinkedHashMap</code>.\nAn I/O error.\nIgnore the offending bytes, remove them from the output.\nYAML int is stored as i64.\nAn error that happened when loading a YAML document.\nYAML null, e.g. <code>null</code> or <code>~</code>.\nFloat types are stored as String and parsed on demand. …\nReplace them with the Unicode REPLACEMENT CHARACTER.\nAn error within the scanner. This indicates a malformed …\nError out.\nYAML scalar.\nThe behavior <code>YamlDecoder</code> must have when an decoding error …\nThe signature of the function to call when using …\nA YAML node is stored as this <code>Yaml</code> enumeration, which …\n<code>YamlDecoder</code> is a <code>YamlLoader</code> builder that allows you to …\nAn iterator over a <code>Yaml</code> node.\nMain structure for quickly parsing YAML.\nGet a copy of the inner object in the YAML enum if it is a …\nReturn the <code>f64</code> value contained in this YAML node.\nGet a reference to the inner object in the YAML enum if it …\nGet a copy of the inner object in the YAML enum if it is a …\nGet a mutable reference to the inner object in the YAML …\nGet a mutable reference to the inner object in the YAML …\nGet a reference to the inner object in the YAML enum if it …\nGet a reference to the inner object in the YAML enum if it …\nSee <code>or</code> for behavior. This performs the same operations, …\nRun the decode operation with the source and trap the …\nPerform a loop of <code>Decoder::decode_to_string</code>, reallocating …\nThe encoding crate knows how to tell apart UTF-8 from …\nThe different YAML documents that are loaded.\nReturn a reference to the parsed Yaml documents.\nSet the behavior of the decoder when the encoding is …\nAn error, if one was encountered.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a string to a <code>Yaml</code> node.\nPerform indexing if <code>self</code> is a sequence or a mapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner object in the YAML enum if it is a <code>$t</code>.\nReturn the <code>f64</code> value contained in this YAML node.\nGet the inner object in the YAML enum if it is a <code>$t</code>.\nGet the inner object in the YAML enum if it is a <code>$t</code>.\nGet the inner object in the YAML enum if it is a <code>$t</code>.\nGet the inner object in the YAML enum if it is a <code>$t</code>.\nReturn whether <code>self</code> is a <code>Yaml::Array</code> node.\nReturn whether <code>self</code> is a <code>Yaml::BadValue</code> node.\nReturn whether <code>self</code> is a <code>Yaml::Null</code> node.\nLoad the contents of the given iterator as a set of YAML …\nLoad the contents from the specified Parser as a set of …\nLoad the given string as a set of YAML documents.\nIf a value is null or otherwise bad (see variants), …\nCreate a <code>YamlDecoder</code> decoding the given source.")