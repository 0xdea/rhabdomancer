searchState.loadedDescShard("foldhash", 0, "This crate provides foldhash, a fast, non-cryptographic, …\nType alias for …\nA convenience extension trait to enable <code>HashMap::new</code> for …\nType alias for …\nA convenience extension trait to enable <code>HashSet::new</code> for …\nThe foldhash implementation optimized for speed.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nThe foldhash implementation optimized for quality.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nA <code>BuildHasher</code> for <code>fast::FoldHasher</code>s that all have the same …\nA <code>Hasher</code> instance implementing foldhash, optimized for …\nA <code>BuildHasher</code> for <code>fast::FoldHasher</code>s that are randomly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>FixedState</code> with the given seed.\nA <code>BuildHasher</code> for <code>quality::FoldHasher</code>s that all have the …\nA <code>Hasher</code> instance implementing foldhash, optimized for …\nA <code>BuildHasher</code> for <code>quality::FoldHasher</code>s that are randomly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>FixedState</code> with the given seed.")