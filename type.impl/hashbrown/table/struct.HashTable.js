(function() {
    var type_impls = Object.fromEntries([["indexmap",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HashTable%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1173-1176\">Source</a><a href=\"#impl-Clone-for-HashTable%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"hashbrown/raw/alloc/inner/trait.Allocator.html\" title=\"trait hashbrown::raw::alloc::inner::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1178\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","indexmap::map::core::Indices"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashTable%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1185-1188\">Source</a><a href=\"#impl-Debug-for-HashTable%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"hashbrown/raw/alloc/inner/trait.Allocator.html\" title=\"trait hashbrown::raw::alloc::inner::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1190\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","indexmap::map::core::Indices"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HashTable%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1162-1164\">Source</a><a href=\"#impl-Default-for-HashTable%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"hashbrown/raw/alloc/inner/trait.Allocator.html\" title=\"trait hashbrown::raw::alloc::inner::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1166\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","indexmap::map::core::Indices"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashTable%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#54\">Source</a><a href=\"#impl-HashTable%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#68\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashTable</code>.</p>\n<p>The hash table is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashTable;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table: HashTable&lt;<span class=\"kw-2\">&amp;</span>str&gt; = HashTable::new();\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(table.capacity(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashTable</code> with the specified capacity.</p>\n<p>The hash table will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash table will not allocate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashTable;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table: HashTable&lt;<span class=\"kw-2\">&amp;</span>str&gt; = HashTable::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"indexmap::map::core::Indices"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashTable%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#94-96\">Source</a><a href=\"#impl-HashTable%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"hashbrown/raw/alloc/inner/trait.Allocator.html\" title=\"trait hashbrown::raw::alloc::inner::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#135\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashTable</code> using the given allocator.</p>\n<p>The hash table is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bumpalo::Bump;\n<span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>bump = Bump::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new_in(<span class=\"kw-2\">&amp;</span>bump);\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n\n<span class=\"comment\">// The created HashTable holds none elements\n</span><span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// The created HashTable also doesn't allocate memory\n</span><span class=\"macro\">assert_eq!</span>(table.capacity(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// Now we insert element inside created HashTable\n</span>table.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"One\"</span>), <span class=\"string\">\"One\"</span>, hasher);\n<span class=\"comment\">// We can see that the HashTable holds 1 element\n</span><span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">1</span>);\n<span class=\"comment\">// And it also allocates some capacity\n</span><span class=\"macro\">assert!</span>(table.capacity() &gt; <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashTable</code> with the specified capacity using the given allocator.</p>\n<p>The hash table will be able to hold at least <code>capacity</code> elements without\nreallocating. If <code>capacity</code> is 0, the hash table will not allocate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bumpalo::Bump;\n<span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>bump = Bump::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::with_capacity_in(<span class=\"number\">5</span>, <span class=\"kw-2\">&amp;</span>bump);\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n\n<span class=\"comment\">// The created HashTable holds none elements\n</span><span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">0</span>);\n<span class=\"comment\">// But it can hold at least 5 elements without reallocating\n</span><span class=\"kw\">let </span>empty_map_capacity = table.capacity();\n<span class=\"macro\">assert!</span>(empty_map_capacity &gt;= <span class=\"number\">5</span>);\n\n<span class=\"comment\">// Now we insert some 5 elements inside created HashTable\n</span>table.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"One\"</span>), <span class=\"string\">\"One\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Two\"</span>), <span class=\"string\">\"Two\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Three\"</span>), <span class=\"string\">\"Three\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Four\"</span>), <span class=\"string\">\"Four\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Five\"</span>), <span class=\"string\">\"Five\"</span>, hasher);\n\n<span class=\"comment\">// We can see that the HashTable holds 5 elements\n</span><span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">5</span>);\n<span class=\"comment\">// But its capacity isn't changed\n</span><span class=\"macro\">assert_eq!</span>(table.capacity(), empty_map_capacity)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#190\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;A</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#223\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.find\" class=\"fn\">find</a>(&amp;self, hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>, eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to an entry in the table with the given hash and\nwhich satisfies the equality function passed.</p>\n<p>This method will call <code>eq</code> for all entries with the given hash, but may\nalso call it for entries with a different hash. <code>eq</code> should only return\ntrue for the desired entry, at which point the search is stopped.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"number\">2</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), <span class=\"number\">3</span>, hasher);\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), |<span class=\"kw-2\">&amp;</span>val| val == <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), |<span class=\"kw-2\">&amp;</span>val| val == <span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#261\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.find_mut\" class=\"fn\">find_mut</a>(\n    &amp;mut self,\n    hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n    eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to an entry in the table with the given hash\nand which satisfies the equality function passed.</p>\n<p>This method will call <code>eq</code> for all entries with the given hash, but may\nalso call it for entries with a different hash. <code>eq</code> should only return\ntrue for the desired entry, at which point the search is stopped.</p>\n<p>When mutating an entry, you should ensure that it still retains the same\nhash value as when it was inserted, otherwise lookups of that entry may\nfail to find it.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>), |val| hasher(<span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val) = table.find_mut(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>) {\n    val.<span class=\"number\">1 </span>= <span class=\"string\">\"b\"</span>;\n}\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>(<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>)));\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#299-303\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.find_entry\" class=\"fn\">find_entry</a>(\n    &amp;mut self,\n    hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n    eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"hashbrown/table/struct.OccupiedEntry.html\" title=\"struct hashbrown::table::OccupiedEntry\">OccupiedEntry</a>&lt;'_, T, A&gt;, <a class=\"struct\" href=\"hashbrown/table/struct.AbsentEntry.html\" title=\"struct hashbrown::table::AbsentEntry\">AbsentEntry</a>&lt;'_, T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an <code>OccupiedEntry</code> for an entry in the table with the given hash\nand which satisfies the equality function passed.</p>\n<p>This can be used to remove the entry from the table. Call\n<a href=\"hashbrown/table/struct.HashTable.html#method.entry\" title=\"method hashbrown::table::HashTable::entry\"><code>HashTable::entry</code></a> instead if you wish to insert an entry if the\nlookup fails.</p>\n<p>This method will call <code>eq</code> for all entries with the given hash, but may\nalso call it for entries with a different hash. <code>eq</code> should only return\ntrue for the desired entry, at which point the search is stopped.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>), |val| hasher(<span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(entry) = table.find_entry(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>) {\n    entry.remove();\n}\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#359-364\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.entry\" class=\"fn\">entry</a>(\n    &amp;mut self,\n    hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n    eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,\n    hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"hashbrown/table/enum.Entry.html\" title=\"enum hashbrown::table::Entry\">Entry</a>&lt;'_, T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an <code>Entry</code> for an entry in the table with the given hash\nand which satisfies the equality function passed.</p>\n<p>This can be used to remove the entry from the table, or insert a new\nentry with the given hash if one doesn’t already exist.</p>\n<p>This method will call <code>eq</code> for all entries with the given hash, but may\nalso call it for entries with a different hash. <code>eq</code> should only return\ntrue for the desired entry, at which point the search is stopped.</p>\n<p>This method may grow the table in preparation for an insertion. Call\n<a href=\"hashbrown/table/struct.HashTable.html#method.find_entry\" title=\"method hashbrown::table::HashTable::find_entry\"><code>HashTable::find_entry</code></a> if this is undesirable.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::hash_table::Entry;\n<span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>), |val| hasher(<span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>));\n<span class=\"kw\">if let </span>Entry::Occupied(entry) = table.entry(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>, |val| hasher(<span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>))\n{\n    entry.remove();\n}\n<span class=\"kw\">if let </span>Entry::Vacant(entry) = table.entry(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">2</span>, |val| hasher(<span class=\"kw-2\">&amp;</span>val.<span class=\"number\">0</span>)) {\n    entry.insert((<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>));\n}\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(table.find(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), |val| val.<span class=\"number\">0 </span>== <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_unique\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#404-409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.insert_unique\" class=\"fn\">insert_unique</a>(\n    &amp;mut self,\n    hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n    value: T,\n    hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.OccupiedEntry.html\" title=\"struct hashbrown::table::OccupiedEntry\">OccupiedEntry</a>&lt;'_, T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts an element into the <code>HashTable</code> with the given hash value, but\nwithout checking whether an equivalent element already exists within the\ntable.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\nv.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#440\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the table, removing all values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\nv.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#473\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self, hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the table as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::with_capacity(<span class=\"number\">100</span>);\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"number\">2</span>, hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">100</span>);\ntable.shrink_to_fit(hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#511\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>, hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the table with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<p>Panics if the current capacity is smaller than the supplied\nminimum capacity.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::with_capacity(<span class=\"number\">100</span>);\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"number\">2</span>, hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">100</span>);\ntable.shrink_to(<span class=\"number\">10</span>, hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">10</span>);\ntable.shrink_to(<span class=\"number\">0</span>, hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#550\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>, hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashTable</code>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <a href=\"https://doc.rust-lang.org/std/primitive.isize.html\"><code>isize::MAX</code></a> bytes and <a href=\"https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\"><code>abort</code></a> the program\nin case of allocation error. Use <a href=\"hashbrown/table/struct.HashTable.html#method.try_reserve\" title=\"method hashbrown::table::HashTable::try_reserve\"><code>try_reserve</code></a> instead\nif you want to handle memory allocation failure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table: HashTable&lt;i32&gt; = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.reserve(<span class=\"number\">10</span>, hasher);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#586-590\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>,\n    hasher: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"hashbrown/enum.TryReserveError.html\" title=\"enum hashbrown::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>HashTable</code>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<p><code>hasher</code> is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table: HashTable&lt;i32&gt; = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable\n    .try_reserve(<span class=\"number\">10</span>, hasher)\n    .expect(<span class=\"string\">\"why is the test harness OOMing on 10 bytes?\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#603\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the table can hold without reallocating.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::HashTable;\n<span class=\"kw\">let </span>table: HashTable&lt;i32&gt; = HashTable::with_capacity(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(table.capacity() &gt;= <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#629\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the table.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashTable::new();\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>);\nv.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#655\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashTable::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\nv.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#686\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.Iter.html\" title=\"struct hashbrown::table::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in arbitrary order.\nThe iterator element type is <code>&amp;'a T</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>), <span class=\"string\">\"b\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>), <span class=\"string\">\"b\"</span>, hasher);\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>table.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#737\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.IterMut.html\" title=\"struct hashbrown::table::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in arbitrary order,\nwith mutable references to the elements.\nThe iterator element type is <code>&amp;'a mut T</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">1</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"number\">2</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), <span class=\"number\">3</span>, hasher);\n\n<span class=\"comment\">// Update all values\n</span><span class=\"kw\">for </span>val <span class=\"kw\">in </span>table.iter_mut() {\n    <span class=\"kw-2\">*</span>val <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>table {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"val: {}\"</span>, val);\n    vec.push(<span class=\"kw-2\">*</span>val);\n}\n\n<span class=\"comment\">// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\n</span>vec.sort_unstable();\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_hash\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#776\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.iter_hash\" class=\"fn\">iter_hash</a>(&amp;self, hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.IterHash.html\" title=\"struct hashbrown::table::IterHash\">IterHash</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements which may match a hash.\nThe iterator element type is <code>&amp;'a T</code>.</p>\n<p>This iterator may return elements from the table that have a hash value\ndifferent than the one provided. You should always validate the returned\nvalues before using them.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>), <span class=\"string\">\"a\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>), <span class=\"string\">\"b\"</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>), <span class=\"string\">\"c\"</span>, hasher);\n\n<span class=\"comment\">// Will print \"a\" and \"b\" (and possibly \"c\") in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>table.iter_hash(hasher(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, x);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_hash_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#829\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.iter_hash_mut\" class=\"fn\">iter_hash_mut</a>(&amp;mut self, hash: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.IterHashMut.html\" title=\"struct hashbrown::table::IterHashMut\">IterHashMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>A mutable iterator visiting all elements which may match a hash.\nThe iterator element type is <code>&amp;'a mut T</code>.</p>\n<p>This iterator may return elements from the table that have a hash value\ndifferent than the one provided. You should always validate the returned\nvalues before using them.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">2</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"number\">3</span>, hasher);\ntable.insert_unique(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"number\">5</span>, hasher);\n\n<span class=\"comment\">// Update matching values\n</span><span class=\"kw\">for </span>val <span class=\"kw\">in </span>table.iter_hash_mut(hasher(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>)) {\n    <span class=\"kw-2\">*</span>val <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>table {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"val: {}\"</span>, val);\n    vec.push(<span class=\"kw-2\">*</span>val);\n}\n\n<span class=\"comment\">// The values will contain 4 and 6 and may contain either 5 or 10.\n</span><span class=\"macro\">assert!</span>(vec.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(vec.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>));\n\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#862\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.retain\" class=\"fn\">retain</a>(&amp;mut self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>false</code>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"number\">1</span>..=<span class=\"number\">6 </span>{\n    table.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>x), x, hasher);\n}\ntable.retain(|<span class=\"kw-2\">&amp;mut </span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(table.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#903\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.Drain.html\" title=\"struct hashbrown::table::Drain\">Drain</a>&lt;'_, T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the set, returning all elements in an iterator.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"number\">1</span>..=<span class=\"number\">3 </span>{\n    table.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>x), x, hasher);\n}\n<span class=\"macro\">assert!</span>(!table.is_empty());\n\n<span class=\"comment\">// print 1, 2, 3 in an arbitrary order\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>table.drain() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, i);\n}\n\n<span class=\"macro\">assert!</span>(table.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#950-952\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.ExtractIf.html\" title=\"struct hashbrown::table::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.</p>\n<p>In other words, move all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>true</code> out\ninto another iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"hashbrown/table/struct.HashTable.html#method.retain\" title=\"method hashbrown::table::HashTable::retain\"><code>retain()</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>table = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">8 </span>{\n    table.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>x), x, hasher);\n}\n<span class=\"kw\">let </span>drained: Vec&lt;i32&gt; = table.extract_if(|<span class=\"kw-2\">&amp;mut </span>v| v % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>evens = drained.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>odds = table.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\nevens.sort();\nodds.sort();\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_many_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1041-1045\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.get_many_mut\" class=\"fn\">get_many_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    hashes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">N</a>],\n    eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,\n) -&gt; [<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut T</a>&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Attempts to get mutable references to <code>N</code> values in the map at once.</p>\n<p>The <code>eq</code> argument should be a closure such that <code>eq(i, k)</code> returns true if <code>k</code> is equal to\nthe <code>i</code>th key to be looked up.</p>\n<p>Returns an array of length <code>N</code> with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. <code>None</code> will be used if the key is missing.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if any keys are overlapping.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::hash_table::Entry;\n<span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>libraries: HashTable&lt;(<span class=\"kw-2\">&amp;</span>str, u32)&gt; = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>[\n    (<span class=\"string\">\"Bodleian Library\"</span>, <span class=\"number\">1602</span>),\n    (<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>),\n    (<span class=\"string\">\"Herzogin-Anna-Amalia-Bibliothek\"</span>, <span class=\"number\">1691</span>),\n    (<span class=\"string\">\"Library of Congress\"</span>, <span class=\"number\">1800</span>),\n] {\n    libraries.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>k), (k, v), |(k, <span class=\"kw\">_</span>)| hasher(<span class=\"kw-2\">&amp;</span>k));\n}\n\n<span class=\"kw\">let </span>keys = [<span class=\"string\">\"Athenæum\"</span>, <span class=\"string\">\"Library of Congress\"</span>];\n<span class=\"kw\">let </span>got = libraries.get_many_mut(keys.map(|k| hasher(<span class=\"kw-2\">&amp;</span>k)), |i, val| keys[i] == val.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    got,\n    [<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Library of Congress\"</span>, <span class=\"number\">1800</span>))],\n);\n\n<span class=\"comment\">// Missing keys result in None\n</span><span class=\"kw\">let </span>keys = [<span class=\"string\">\"Athenæum\"</span>, <span class=\"string\">\"New York Public Library\"</span>];\n<span class=\"kw\">let </span>got = libraries.get_many_mut(keys.map(|k| hasher(<span class=\"kw-2\">&amp;</span>k)), |i, val| keys[i] == val.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(got, [<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>)), <span class=\"prelude-val\">None</span>]);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>libraries: HashTable&lt;(<span class=\"kw-2\">&amp;</span>str, u32)&gt; = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>[\n    (<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>),\n    (<span class=\"string\">\"Library of Congress\"</span>, <span class=\"number\">1800</span>),\n] {\n    libraries.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>k), (k, v), |(k, <span class=\"kw\">_</span>)| hasher(<span class=\"kw-2\">&amp;</span>k));\n}\n\n<span class=\"comment\">// Duplicate keys result in a panic!\n</span><span class=\"kw\">let </span>keys = [<span class=\"string\">\"Athenæum\"</span>, <span class=\"string\">\"Athenæum\"</span>];\n<span class=\"kw\">let </span>got = libraries.get_many_mut(keys.map(|k| hasher(<span class=\"kw-2\">&amp;</span>k)), |i, val| keys[i] == val.<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_many_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1105-1109\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.get_many_unchecked_mut\" class=\"fn\">get_many_unchecked_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    hashes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.u64.html\">u64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">N</a>],\n    eq: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a>,\n) -&gt; [<a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut T</a>&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Attempts to get mutable references to <code>N</code> values in the map at once, without validating that\nthe values are unique.</p>\n<p>The <code>eq</code> argument should be a closure such that <code>eq(i, k)</code> returns true if <code>k</code> is equal to\nthe <code>i</code>th key to be looked up.</p>\n<p>Returns an array of length <code>N</code> with the results of each query. <code>None</code> will be returned if\nany of the keys are missing.</p>\n<p>For a safe alternative see <a href=\"hashbrown/table/struct.HashTable.html#method.get_many_mut\" title=\"method hashbrown::table::HashTable::get_many_mut\"><code>get_many_mut</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method with overlapping keys is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting\nreferences are not used.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hashbrown::hash_table::Entry;\n<span class=\"kw\">use </span>hashbrown::{HashTable, DefaultHashBuilder};\n<span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>libraries: HashTable&lt;(<span class=\"kw-2\">&amp;</span>str, u32)&gt; = HashTable::new();\n<span class=\"kw\">let </span>hasher = DefaultHashBuilder::default();\n<span class=\"kw\">let </span>hasher = |val: <span class=\"kw-2\">&amp;</span><span class=\"kw\">_</span>| hasher.hash_one(val);\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>[\n    (<span class=\"string\">\"Bodleian Library\"</span>, <span class=\"number\">1602</span>),\n    (<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>),\n    (<span class=\"string\">\"Herzogin-Anna-Amalia-Bibliothek\"</span>, <span class=\"number\">1691</span>),\n    (<span class=\"string\">\"Library of Congress\"</span>, <span class=\"number\">1800</span>),\n] {\n    libraries.insert_unique(hasher(<span class=\"kw-2\">&amp;</span>k), (k, v), |(k, <span class=\"kw\">_</span>)| hasher(<span class=\"kw-2\">&amp;</span>k));\n}\n\n<span class=\"kw\">let </span>keys = [<span class=\"string\">\"Athenæum\"</span>, <span class=\"string\">\"Library of Congress\"</span>];\n<span class=\"kw\">let </span>got = libraries.get_many_mut(keys.map(|k| hasher(<span class=\"kw-2\">&amp;</span>k)), |i, val| keys[i] == val.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    got,\n    [<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Library of Congress\"</span>, <span class=\"number\">1800</span>))],\n);\n\n<span class=\"comment\">// Missing keys result in None\n</span><span class=\"kw\">let </span>keys = [<span class=\"string\">\"Athenæum\"</span>, <span class=\"string\">\"New York Public Library\"</span>];\n<span class=\"kw\">let </span>got = libraries.get_many_mut(keys.map(|k| hasher(<span class=\"kw-2\">&amp;</span>k)), |i, val| keys[i] == val.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(got, [<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>(<span class=\"string\">\"Athenæum\"</span>, <span class=\"number\">1807</span>)), <span class=\"prelude-val\">None</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocation_size\" class=\"method\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1119\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hashbrown/table/struct.HashTable.html#tymethod.allocation_size\" class=\"fn\">allocation_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total amount of memory allocated internally by the hash\ntable, in bytes.</p>\n<p>The returned number is informational only. It is intended to be\nprimarily used for memory profiling.</p>\n</div></details></div></details>",0,"indexmap::map::core::Indices"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-HashTable%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1124-1126\">Source</a><a href=\"#impl-IntoIterator-for-HashTable%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"hashbrown/table/struct.HashTable.html\" title=\"struct hashbrown::table::HashTable\">HashTable</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"hashbrown/raw/alloc/inner/trait.Allocator.html\" title=\"trait hashbrown::raw::alloc::inner::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1128\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1129\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.84.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hashbrown/table/struct.IntoIter.html\" title=\"struct hashbrown::table::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hashbrown/table.rs.html#1131\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hashbrown/table/struct.IntoIter.html\" title=\"struct hashbrown::table::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.84.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","indexmap::map::core::Indices"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[81092]}